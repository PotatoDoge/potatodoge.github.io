---
layout: post
title:  "Log 2 - It takes two flints to make a fire."
date:   2022-10-23 23:34:38 -0700
categories: jekyll update
---
Learning a new syntax and getting familiarized with a new programing language is always both challenging and exciting. It is something new yet something rather familiar. This last 2 weeks, the apprentice team and I have been putting a lot of effort into solving and coding these problems. We were given 8 problems and 2 weeks to design a solution, and code it. Once it was coded, the code had to pass some tests provided by a Google Competition called 'Google Code Jam'. There were 8 problems, and for each problem we had to code it in 4 different languages: Dart, Kotlin, Python and Typescript. We are 10 in the team, so we had a meetings in which, as a team, came up with solutions and after that, everyone said which problems and in which language were they going to take upon. I took upon of 3 problems: '3D Printing' in Kotlin, 'Double or one thing' in Python and 'Equal Sum' in Dart. Up next I will give a quick overview of the problems and the solutions that we came up with.

## Problems 
 - [Punched Cards](#punched-cards) 
 - [3D Printing](#3d-printing)
 - [D1000000](#d1000000) 
 - [Chain Reactions](#chain-reactions)
 - [Twisty little passages](#twisty-little-passages) 
 - [Double or one thing](#double-or-one-thing)
 - [Equal sum](#equal-sum) 
 - [Weightlifting](#weightlifting)


## Punched cards
[Back to the top](#problems)


## 3D printing
[Back to the top](#problems)

For this problem, you supposedly have 3 printers, each with 4 ink cartridges: cyan(c), magenta(m), yellow(y) and black(k).  You must print a letter ‘D’ of the same color from each printer. You can create any color that you want but you must follow 2 basic rules: To print a color, a printer must have at least the required amount of ink for each of its 4 color cartridges, and that the total amount of ink needed to print a single D is exactly 10^6 units.  

Printers’ distribution could be represented as the next table:  


|   |Cyan|Magenta|Yellow|Black|
|---|:---:|:---:|:---:|:--:|
|Printer #1   |300 000   |200 000   |300 000   |500 000   |
|Printer #2   |300 000   |200 000   |500 000   |200 000   |
|Printer #3   |300 000   |500 000   |300 000   |200 000   |

We must get the next values: C = min(C1,C2,C3), M = min(M1,M2,M3), Y = min(Y1,Y2,Y3) and K = min(K1,K2,K3). Once we get these values, we have to add them in order to see if they add up to 1 000 000. If the value is less than one million, it is impossible to print anything, if the value is equal to one million, we can print without any problem, and if the value is greater than we must subtract any amount of ink so that we get one million units exactly.

You were given three printers and will use each one to print one of the D's. All printers use ink from 4 individual cartridges of different colors (cyan, magenta, yellow, and black) to form any color. For these printers, a color is uniquely defined by 4 non-negative integers c, m, y, and k, which indicate the number of ink units of cyan, magenta, yellow, and black ink (respectively) needed to make the color. 

The total amount of ink needed to print a single D is exactly 1 000 000 units. For example, printing a D in pure yellow would use 1 000 000 units of yellow ink and 0 from all others. Printing a D in the Code Jam red uses 0 units of cyan ink, 500000 units of magenta ink, 450000 units of yellow ink, and 50000 units of black ink 

 
A simple solution to this problem is getting the minimum value of each color of the 4 printers. Once we get the minimum values, we add them and if they add up to one million exactly, we can print. If the result is less than 1 000 000, we cannot print anything. And if the result is greater than one million, you must subtract units of ink to get to one million. Now, how do we know from which cartridge of ink you should subtract from? Easy, from the 4 minimum values, you get the maximum value, like this:  Crt = max(c,m,y,k). To that cartridge, you subtract until all 4 values add up to one million, or if that value is equal to zero. If this is the case, that value stays as zero, and you subtract from the next maximum value. That process should go on until you get the sum of one million. 

## D1000000
[Back to the top](#problems)

## Chain Reactions
[Back to the top](#problems)

## Twisty Little Passages
[Back to the top](#problems)

Twisty Little Passages is a problem that deals with probability and importance sampling. You are given the total rooms and the number of operations that you can do for every case. You need to implement a way of asking the user every move you want to do by teleporting and walking a total of K times, getting all the degrees possible and also a good estimation of a degree average, this in case there is still rooms left to visit by our K operations. 

In our solution we implemented the following graph formula for edges (passages in problem): 

Edges (Passages) = ΣDegrees/2 

For this type of problems there is no pure scientific correct way of solving, here you need to implement enough heuristics so that you are fairly certain that you are close to a good estimate. 

The first approach was to just teleport and visit 8000 random chosen vertices, using all of them to estimate the average degree of all the vertices, this kind of works, but if the graph is in a star shape where all of the passages connect to a center, there is a high chance you don’t hit the center by teleporting, causing the sample to average every degree to 1. 
One way to fix this is to teleport once, then walk once, so in case of a star your chances of hitting the center is 100%, and not just a tiny fraction. Like this: 
Repeat 4000 times: 

Randomly teleport to an unexplored vertex  

Walk 1 time to a random neighbor 

In order to be able to teleport to an unexplored vertex, to maximize chances of seeing something new we need to use a set, which will let us store unseen places and to ignore the ones we already visited thanks to its property of hashing. This will also result in an optimized solution since the look up and insertion time complexity of the set is of O(1). 

You are investigating a cave, which is a simple undirected graph with N vertices and no isolated vertices. At the start you are told that the cave has N <= 10^5 rooms. The vertex number you are at and the number of incident edges.  

When in a room, you can identify what room you are in and see how many passages it connects to, but you cannot distinguish the passages. You want to estimate the number of passages that exist in the cave. You are allowed to do up to K = 8000 operations. An operation is either: 

Teleport: You choose to teleport to a vertex number of your choice 

Walk: You choose to be moved to a uniformly chosen random neighbor of the current vertex. 

After each move, you are told the vertex number and the number of incident edges. With this information you have to estimate the number of edges in the graph in an approximation error of 33.3%, and you are to succeed in at least 90% of the test cases. 


## Double or one thing
[Back to the top](#problems)

For this problem you are given a string. With this, you can select any number of characters in the string and choose to duplicate them or not. For example, if you are given the word dog, you might as well get ddoogg from it, or not selecting any character and stay with word dog. From all the combinations that you could get from the word (dog, ddog, ddogg, etc.), you must get the one that appears first in alphabetical order.  

It was really important to identify and analyze any sort of pattern that could be seen between the input, the process and the output. For example, if a letter is consecutively repeated more than once, and if, in alphabetical order, the next letter is different and greater than the one you are at, you would just add to the output the letter, but if it is not greater than, you would add the repeated letters doubled. These patterns were important to analyze and at the end they are the fundaments of the solution.  

You are given a string of uppercase English letters. You can highlight any number of the letters (possibly all or none of them). The highlighted letters do not need to be consecutive. Then, a new string is produced by processing the letters from left to right: non-highlighted letters are appended once to the new string, while highlighted letters are appended twice. 

Given a string, there are multiple strings that can be obtained as a result of this process, depending on the highlighting choices. Among all of those strings, output the one that appears first in alphabetical (also known as lexicographical) order. 

One of the approaches that were found was to go analyzing letter by letter and comparing it to the next one with each iteration. If a letter was the same as the next one, it would only increase 1 in a variable that counted how many times a letter was repeated consecutively. Once a letter was different than the next one, it would compare if it was, alphabetically, greater or less than the next one. If it was greater than, it would only append the single letter multiplied by the number of times it was consecutively repeated (being 1 the default) to the final answer (a string), and if it the next letter was not greater than the one it was at, it would append the letter multiplied by two multiplied by the number of times it was consecutively repeated. At the end, we would have the word that appears first in alphabetical order amongst all possible combinations. 

Here I explain this problem and show the source code: [Double or one thing](https://potatodoge.github.io/jekyll/update/2022/10/22/log1.html)


## Equal Sum
[Back to the top](#problems)

We are asked to divide a set of 2N different numbers into 2 subsets, no matter its size, in which the sums of their elements have the same value, in other words, the difference of their sums needs to be equal to zero. The problem has 3 stages. During stage 1, the user inputs the first N different numbers, in stage 2 the machine provides the remaining N numbers in such a way that the sum of all 2N integers is even. In stage 3, the user prints one of the two possible sets with equal sum for the given 2N numbers. All the numbers provided have values between 1 and 10**9 and N is always equal to 100 for the test cases. 

In order to solve this problem, the user needs to generate the first N numbers in such a way that these numbers can fulfill any possible difference. It can be said that after minimizing the difference of the sum of the two subsets, this difference could be, at most, of 10^9. Therefore, we need to provide a set of numbers that combined would take any value between 1 and 10^9 to satisfy this difference. Given that N will be bigger than 100 if we use the decimal system to represent every possible difference, a binary representation of numbers from 1 to 10^9 needs to be implemented. Indeed, this representation can be reached with the 30 first powers of 2, and thus the remaining N-30 numbers we need to provide can be whatever other numbers inside 1 and 10^9.

You are given a set of distinct integers. You need to separate them into two non-empty subsets such that each element belongs to exactly one of them and the sum of all elements of each subset is the same. 

An anonymous tip told us that the problem above was unlikely to be solved in polynomial time (or something like that), so we decided to change it. Now you get to decide what half of the integers are! 

This is an interactive problem with three phases. In phase 1, you choose NN distinct integers. In phase 2, you are given another NN integers that are distinct from each other and from the ones you chose in phase 1. In phase 3, you have to partition those 2N2N integers into two subsets, both of which sum to the same amount. All 2N2N integers are to be between 11 and 109109, inclusive, and it is guaranteed that they sum up to an even number. (Google Code Jam Problem statements).

# ***Binary Representation*** 

It is a numbering system with base 2 in which numbers are represented using only two digits: zero and one (0 and 1). 

# ***Decimal to binary conversion***. 

The number of the decimal system is divided by 2, whose whole result is divided again by 2, and so on until the dividend is less than the divisor, 2. Then the remainders are ordered starting from the last to the first, simply placed in reverse order as they appear in the division. This will be the number converted to binary. 


## Weightlifting
[Back to the top](#problems)

